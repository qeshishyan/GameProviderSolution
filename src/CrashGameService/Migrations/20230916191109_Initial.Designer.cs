// <auto-generated />
using System;
using CrashGameService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CrashGameService.Migrations
{
    [DbContext(typeof(CrashDbContext))]
    [Migration("20230916191109_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CrashGameService.Entities.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("BetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameRoundId")
                        .HasColumnType("integer");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<bool>("Win")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GameRoundId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("CrashGameService.Entities.CashOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BetId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("CashOuts");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCrashed")
                        .HasColumnType("boolean");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Started")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("GameRounds");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BettingTime")
                        .HasColumnType("boolean");

                    b.Property<int?>("CurrentRoundId")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderId")
                        .HasColumnType("text");

                    b.Property<bool>("Started")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRoundId")
                        .IsUnique();

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("CrashGameService.Entities.Bet", b =>
                {
                    b.HasOne("CrashGameService.Entities.GameRound", "GameRound")
                        .WithMany("Bets")
                        .HasForeignKey("GameRoundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameRound");
                });

            modelBuilder.Entity("CrashGameService.Entities.CashOut", b =>
                {
                    b.HasOne("CrashGameService.Entities.Bet", "Bet")
                        .WithMany("CashOuts")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameRound", b =>
                {
                    b.HasOne("CrashGameService.Entities.GameSession", "GameSession")
                        .WithMany("GameRounds")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameSession", b =>
                {
                    b.HasOne("CrashGameService.Entities.GameRound", "CurrentRound")
                        .WithOne()
                        .HasForeignKey("CrashGameService.Entities.GameSession", "CurrentRoundId");

                    b.Navigation("CurrentRound");
                });

            modelBuilder.Entity("CrashGameService.Entities.Bet", b =>
                {
                    b.Navigation("CashOuts");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameRound", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("CrashGameService.Entities.GameSession", b =>
                {
                    b.Navigation("GameRounds");
                });
#pragma warning restore 612, 618
        }
    }
}
